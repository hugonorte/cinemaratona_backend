directive @auth(
    guards: [String!]
) on FIELD_DEFINITION

directive @inject(
    context: String!
    name: String!
) repeatable on FIELD_DEFINITION

directive @create(
    model: String
    relation: String
) on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @field(
    resolver: String!
) on FIELD_DEFINITION

directive @spread on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

type Query {
    me: User @auth
    checkUserWatchedMovie(user_id: ID!, movie_id: ID!): Boolean @field(resolver: "App\\GraphQL\\Queries\\CheckUserWatchedMovie")
    watchedMoviesByUser(user_id: ID!): WatchedMoviesPayload!
    @field(resolver: "App\\GraphQL\\Queries\\WatchedMoviesByUser")
}

type Mutation {
    createUser(input: RegisterInput!): User! @field(resolver: "App\\GraphQL\\Mutations\\CreateUser")
    login(email: String!, password: String!): AuthPayload!
    refreshToken(refresh_token: String!): AuthPayload!
    createReview(input: CreateReviewInput!): Review! @field(resolver: "App\\GraphQL\\Mutations\\CreateReview")
    markMovieAsWatched(input: MarkAsWatchedInput!): MarkAsWatchedPayload! @field(resolver: "App\\GraphQL\\Mutations\\MarkMovieAsWatched")
}

type User {
    id: ID!
    name: String!
    email: String!
    created_at: String!
    updated_at: String!
}

type Movie {
    id: ID!
    title: String!
    release_date: String
    poster: String
    created_at: String
    updated_at: String
}

input RegisterInput {
    name: String!
    email: String!
    password: String!
}

input LoginInput {
    email: String!
    password: String!
}

type AuthPayload {
    access_token: String!
    refresh_token: String!
    user: User!
}

type Review {
    id: ID!
    movie_id: ID!
    review: String
    rating: Int
    user_id: ID
}

type MarkAsWatchedPayload {
    movie_id: ID!
    user_id: ID!
}

type WatchedMoviesPayload {
    total: Int!
    movies: [Movie!]!
}

input CreateReviewInput {
    movie_id_from_api: ID!
    title: String
    release_date: String
    poster: String
    review: String
    rating: Int!
    user_id: ID
}

input MarkAsWatchedInput {
    movie_id_from_api: ID!
    user_id: ID
    title: String
    release_date: String
    poster: String
}

type TotalMoviesWatched {
    movies: [Movie!]!
    total: Int!
}


